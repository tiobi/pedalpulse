// Mocks generated by Mockito 5.4.2 from annotations
// in pedalpulse/test/mocks/database/mock_query.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_1<T extends Object?> extends _i1.SmartFake
    implements _i2.Query<T> {
  _FakeQuery_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_2<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_3 extends _i1.SmartFake
    implements _i2.AggregateQuery {
  _FakeAggregateQuery_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery extends _i1.Mock implements _i2.Query<Map<String, dynamic>> {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i2.Query<Map<String, dynamic>> endAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBeforeDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> endBefore(Iterable<Object?>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>> get(
          [_i4.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                _FakeQuerySnapshot_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i3.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> limitToLast(int? limit) =>
      (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue:
            _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
      ) as _i3.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i2.Query<Map<String, dynamic>> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfterDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAfter(Iterable<Object?>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAtDocument(
          _i2.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> startAt(Iterable<Object?>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<Map<String, dynamic>> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<Map<String, dynamic>>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i2.Query<Map<String, dynamic>>);

  @override
  _i2.Query<R> withConverter<R>({
    required _i2.FromFirestore<R>? fromFirestore,
    required _i2.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeQuery_1<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_1<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i2.Query<R>);

  @override
  _i2.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_3(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_3(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i2.AggregateQuery);
}
